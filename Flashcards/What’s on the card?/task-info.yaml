type: edu
custom_name: stage2
files:
- name: test/FlashcardsTest.java
  visible: false
  text: |
    import flashcards.MainKt;
    import org.hyperskill.hstest.v6.stage.BaseStageTest;

    public abstract class FlashcardsTest<T> extends BaseStageTest<T> {
        public FlashcardsTest() {
            super(MainKt.class);
        }
    }
  learner_created: false
- name: test/FlashcardsStage2Test.kt
  visible: false
  text: |+
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase
    import FlashcardsStage2Answer.RIGHT
    import FlashcardsStage2Answer.WRONG

    data class FlashcardsStage2Clue(
            val consoleInput: String,
            val answer: FlashcardsStage2Answer,
            val revealTest: Boolean = false
    )

    enum class FlashcardsStage2Answer(val word: String) {
        RIGHT("right"),
        WRONG("wrong");
    }

    class FlashcardsStage2Test : FlashcardsTest<FlashcardsStage2Clue>() {

        override fun generate(): List<TestCase<FlashcardsStage2Clue>> {
            return listOf(
                    createTestCase("a purring animal\ncat\ncat\n", RIGHT, true),
                    createTestCase("a purring animal\ncat\n????\n", WRONG, true),
                    createTestCase("a barking animal\ndog\ncat\n", WRONG),
                    createTestCase("a barking animal\ndog\ndog\n", RIGHT)
            )
        }

        override fun check(reply: String, clue: FlashcardsStage2Clue): CheckResult {
            val words = reply.lowerWords()

            val hasRight = RIGHT.word.toLowerCase() in words
            val hasWrong = WRONG.word.toLowerCase() in words

            if ((hasRight || !hasWrong) && clue.answer == WRONG) {
                return if (clue.revealTest) {
                    CheckResult(
                            false,
                            revealRawTest(clue.consoleInput, reply) + "Expected the \"${WRONG.word}\" word."
                    )
                } else {
                    CheckResult(false)
                }
            }

            if ((hasWrong || !hasRight) && clue.answer == RIGHT) {
                return if (clue.revealTest) {
                    CheckResult(
                            false,
                            revealRawTest(clue.consoleInput, reply) + "Expected the \"${RIGHT.word}\" word."
                    )
                } else {
                    CheckResult(false)
                }
            }

            return CheckResult(true)
        }

        companion object {
            private fun createTestCase(
                    consoleInput: String,
                    answer: FlashcardsStage2Answer,
                    revealTest: Boolean = false
            ): TestCase<FlashcardsStage2Clue> {
                return TestCase<FlashcardsStage2Clue>()
                        .setInput(consoleInput)
                        .setAttach(FlashcardsStage2Clue(consoleInput, answer, revealTest))
            }
        }
    }

    fun revealRawTest(consoleInput: String, reply: String): String {
        return "Input:\n$consoleInput\nYour output:\n$reply\n\n"
    }

    fun String.lowerWords(): Set<String> {
        val lowerReply = this.trim().toLowerCase()

        val onlyLetters = lowerReply.map { if (it.isLetter()) it else ' ' }.joinToString("")

        return onlyLetters.split(" ").filter { it.isNotEmpty() }.toSet()
    }


  learner_created: false
- name: src/flashcards/Main.kt
  visible: true
  text: |
    package flashcards

    fun main() {
        println("Hello, World!")
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/83/stages/458/implement
status: Solved
record: 2
